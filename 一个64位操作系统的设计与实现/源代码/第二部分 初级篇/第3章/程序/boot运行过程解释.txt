初始化各个段寄存器和栈指针
清屏
设定光标
显示一行字符串
重置磁盘驱动器
重点:如何在FAT12文件系统中查找loader.bin
    记录根目录的起始扇区号
    根目录扇区共有14个,比较最外层循环数是否为零,若为零则表示在这14个扇区中没有找到loader.bin文件
    将第一个目录项扇区读入缓冲区00:8000h
        每个目录项有32字节,所以一个根目录扇区共有16个目录项,将16保存在dx提供判断条件
            每个目录项记录着文件名和后缀名共11字节,循环比较次数11次保存在cx
                依次比较,第一个字节匹配则跳转到下一个字节进行比较,以此类推,中途有一个字节不匹配则跳转到下一个目录项Label_Different
                Label_Different:
                    复位di指针到目录项头,加上32指向下一个目录项
                此时cx应该不为零,因为未比较完整的11次
                如果匹配,跳转到Label_FileName_Found,此时cx应该为0,即比较了完整的11次,准备读入loader.bin文件到指定位置BaseOfLoader:OffsetOfLoader
        如果一个扇区的16个目录项均不匹配,读入下一个根目录扇区进行下一轮比较,如果14个扇区都没有找到loader.bin文件,则跳转到Label_No_LoaderBin(未找到loader.bin)

关于读入loader.bin文件到指定位置BaseOfLoader:OffsetOfLoader的工作
    首先设定根目录占用扇区数
        此时di指向找到的文件所对应根目录项第11字节,清零低5位得到将di指向目录项0偏移处,然后加上26令di指向文件目录项的起始簇号
        读入起始簇号对应的扇区
        每读入一个扇区的数据就通过Func_GetFATEntry模块取得下一个FAT表项,并跳转至Label_Go_On_Loading_File处继续读入下一个簇的数据
        如此往复直至Func_GetFATEntry模块返回的FAT表项值是0fffh为止,当loader.bin文件的数据全部读入到内存中后,跳转至Label_File_Loaded处准备执行loader.bin程序

关于解析FAT表项Func_GetFATEntry
    此时的00:8000h缓存FAT表扇区数据
    通过Func_ReadOneSector模块连续读入两个扇区的数据,目的是为了解决FAT表项横跨两个扇区的问题,先不管奇偶性读入连续两个扇区
    判断FAT表项的奇偶性,如果奇数项则表示低4位是下一个FAT表项的值,偶数项,则保留高4位(Intel处理器是小端字节序,所以下一条指令读出的正好是将错位还原好的FAT表项的两个字节)